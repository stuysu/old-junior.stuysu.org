let monthSelect=null,yearSelect=null,daySelect=null,calendarForm=null,calendarInputs=null;function getCalendarInputs(){return{dateline:document.getElementById("calendar-dateline"),dayLetter:document.getElementById("calendar-day-letter"),dayType:document.getElementById("calendar-day-type"),notes:document.getElementById("calendar-notes")}}function onResponseLoad(){let e=new Date(Date.now());monthSelect=document.getElementById("month-select"),yearSelect=document.getElementById("year-select"),daySelect=document.getElementById("day-select"),calendarForm=document.getElementById("calendar-form"),calendarInputs=getCalendarInputs(),yearSelect.value=e.getFullYear(),monthSelect.selectedIndex=e.getMonth(),daySelect.value=e.getDate(),updateCalendarForm()}function getDaysInMonth(e,t){return new Date(t,e,0).getDate()}function clamp(e,t,a){return Math.max(t,Math.min(e,a))}function getCurrentDate(){return{day:clamp(daySelect.value,Number(daySelect.min),Number(daySelect.max)),month:monthSelect.selectedIndex+1,year:Number(yearSelect.value)}}async function getExistingDate(e){return await sfetch(`/api/calendar?day=${e.day}&month=${e.month}&year=${e.year}`)}function getSelectIndex(e,t){for(let a=0;a<e.options.length;++a)if(t==e.options[a].value)return a;return 0}function clearInputs(){calendarInputs.dayType.selectedIndex=-1,calendarInputs.dayLetter.selectedIndex=-1,calendarInputs.notes.value=""}function getDateFromCalendar(e){return new Date(e.year,e.month-1,e.day)}async function updateCalendarForm(){daySelect.max=getDaysInMonth(monthSelect.selectedIndex+1,yearSelect.value);let e=getCurrentDate();daySelect.value=e.day;let t=await getExistingDate(e),a=getDateFromCalendar(e).getDay();calendarInputs.dateline.innerHTML=`${e.month}/${e.day}/${e.year}<br>${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][a]}`,null!=t?(console.log("updating "),calendarInputs.dayLetter.selectedIndex=getSelectIndex(calendarInputs.dayLetter,t.dayLetter),calendarInputs.dayType.selectedIndex=getSelectIndex(calendarInputs.dayType,t.dayType),calendarInputs.notes.value=t.note):(console.log("clearing"),clearInputs())}function isCalendarInputValid(){return!(calendarInputs.dayType.selectedIndex<0||calendarInputs.dayLetter.selectedIndex<0)}function getCalendarBodyData(){let e=getCurrentDate();return{day:e.day,month:e.month,year:e.year,dayLetter:calendarInputs.dayLetter.value,firstPeriod:1,dayType:calendarInputs.dayType.value,note:document.getElementById("calendar-notes").value}}async function saveDate(){if(!isCalendarInputValid())return void alertManager.addAlert("Failure","not all date inputs are filled out, cannot make a new date entry","warning");let e=await sfetch("/api/calendar",{method:"PUT",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(getCalendarBodyData())});e.updated?alertManager.addAlert("Success","updated existing date with new information"):e.id?alertManager.addAlert("Success","created new date entry with given data"):alertManager.addAlert("Failure","likely database error","warning")}async function clearDate(){clearInputs();let e=await getExistingDate(getCurrentDate());if(null!=e){if((await sfetch("/api/calendar/"+e.id,{method:"DELETE",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer"})).deleted)return void alertManager.addAlert("Success","Selected date cleared from the database")}alertManager.addAlert("Failure","No date to clear from database, or database error","warning")}onResponseLoad();
